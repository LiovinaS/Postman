{
	"info": {
		"_postman_id": "b1402dcf-0739-4efa-b95d-5396594e92bf",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "EP_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {    //2. Статус код 200\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let type = typeof(pm.response.text())          //вывод в консоль тип боди\r",
							"console.log(\"Body type is \" + type)\r",
							"\r",
							"pm.test(\"Body it's string\", function() {      //3. Проверить, что в body приходит правильный string.\r",
							"    pm.expect(type).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}:{{port}}/first",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {  //2.Статус код 200\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json(); //3.Спарсить response body в json.\r",
							"\r",
							"//4.Проверить, что name в ответе равно name s request \r",
							"pm.test(\"Name matched\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Sveta\");\r",
							"});\r",
							"//5.Проверить, что age в ответе равно age s request \r",
							"pm.test(\"Age matched\", function () {\r",
							"    pm.expect(jsonData.age).to.eql('25');\r",
							"});\r",
							"//6.Проверить, что salary в ответе равно salary s request\r",
							"pm.test(\"Salary matched\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(600);\r",
							"});\r",
							"\r",
							"let req = request.data //7.Спарсить request\r",
							"let req_name = req.name\r",
							"let req_age = req.age\r",
							"let req_salary = req.salary\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request\r",
							"pm.test(\"Name correct\", function () {\r",
							"   pm.expect(req_name).to.eql(jsonData.name);\r",
							"});\r",
							"//9.Проверить, что age в ответе равно age s request \r",
							"pm.test(\"Age correct\", function () {\r",
							"   pm.expect(req_age).to.eql(jsonData.age);\r",
							"});\r",
							"//10. Проверить, что salary в ответе равно salary s request\r",
							"pm.test(\"Salary correct\", function () {\r",
							"   pm.expect(parseInt(req_salary)).to.eql(jsonData.salary);\r",
							"});\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"let family = jsonData.family\r",
							"console.log(family)\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let salary_1_5_year = req_salary * 4\r",
							"pm.test(\"Salary 1.5 year correct\", function () {\r",
							"   pm.expect(salary_1_5_year).to.eql(jsonData.family.u_salary_1_5_year);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Sveta",
							"type": "text"
						},
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "600",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}:{{port}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {  //2. Статус код 200\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"// 4. Спарсить request.\r",
							"let req = pm.request.url.query.all();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name correct\", function () {\r",
							"   pm.expect(req[0].value).to.eql(jsonData.name);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age correct\", function () {\r",
							"   pm.expect(req[1].value).to.eql(jsonData.age);\r",
							"});\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary correct\", function () {\r",
							"   pm.expect(parseInt(req[2].value)).to.eql(jsonData.salary);\r",
							"});\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"let family = jsonData.family \r",
							"console.log (family)\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Parametr dog have parametr name\", function () {\r",
							"   pm.expect(jsonData.family.pets.dog).to.have.property('name');\r",
							"});\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Parametr dog have parametr age\", function () {\r",
							"   pm.expect(jsonData.family.pets.dog).to.have.property('age');\r",
							"});\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Parametr dog(name) have value Luky\", function () {\r",
							"   pm.expect(jsonData.family.pets.dog.name).to.include('Luky');\r",
							"});\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"// let age_dog=jsonData.family.pets.dog.age\r",
							"// console.log(typeof(age_dog) + \" value \" + age_dog)\r",
							"pm.test(\"Parametr dog(age) have value=4\", function () {\r",
							"   pm.expect(jsonData.family.pets.dog.age).to.equal(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}:{{port}}/object_info_3?name=Sveta&age=25&salary=600",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Sveta"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "600"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// let jsonData = pm.response.json();\r",
							"// let user_token = jsonData.token\r",
							"// pm.environment.set(\"token\", user_token);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () { //2. Статус код 200\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"// 4. Спарсить request.\r",
							"let req = pm.request.url.query.all();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name correct\", function () {\r",
							"   pm.expect(req[0].value).to.eql(jsonData.name);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Age correct\", function () {\r",
							"   pm.expect(parseInt(req[1].value)).to.eql(jsonData.age);\r",
							"});\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"let salare_req = req[2].value\r",
							"console.log(salare_req)\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"let salare_resp = jsonData.salary\r",
							"console.log(salare_resp)\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"let salare_resp0 = jsonData.salary[0]\r",
							"console.log(\"Salary [0] elements \" +salare_resp0)\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"let salare_resp1 = jsonData.salary[1]\r",
							"console.log(\"Salary [1] elements \" + salare_resp1)\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"let salare_resp2 = jsonData.salary[2]\r",
							"console.log(\"Salary [2] elements \" + salare_resp2)\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Salary_0 correct\", function () {\r",
							"   pm.expect(parseInt(req[2].value)).to.eql(jsonData.salary[0]);\r",
							"});\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Salary_1 correct\", function () {\r",
							"   pm.expect((req[2].value)*2).to.eql(parseInt(jsonData.salary[1]));\r",
							"});\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Salary_2 correct\", function () {\r",
							"   pm.expect((req[2].value)*3).to.eql(parseInt(jsonData.salary[2]));\r",
							"});\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", req[0].value);\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", req[1].value);\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", req[2].value);\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"let k_salary=jsonData.salary; \r",
							"for(let sal = 0; sal < k_salary.length; sal++) {\r",
							"    console.log(\"Salary =  \" + k_salary[sal]);}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}:{{port}}/object_info_4?name=Sveta&age=25&salary=600",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Sveta"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "600"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"// 7. Спарсить request.\r",
							"let req = request.data \r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"There is a Start_qa_salary \", function () {\r",
							"   pm.expect(jsonData).to.have.property('start_qa_salary');\r",
							"});\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"There is a qa_salary_after_6_months \", function () {\r",
							"   pm.expect(jsonData).to.have.property('qa_salary_after_6_months');\r",
							"});\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"There is a qa_salary_after_12_months \", function () {\r",
							"   pm.expect(jsonData).to.have.property('qa_salary_after_12_months');\r",
							"});\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"There is a qa_salary_after_1.5_year \", function () {\r",
							"   pm.expect(jsonData).to.have.property('qa_salary_after_1.5_year');\r",
							"});\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"There is a qa_salary_after_3.5_years \", function () {\r",
							"   pm.expect(jsonData).to.have.property('qa_salary_after_3.5_years');\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Parametrs person \", function () {\r",
							"   pm.expect(jsonData).to.have.property('person');\r",
							"});\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"start_qa_salary\", function () {\r",
							"   pm.expect(jsonData.start_qa_salary).to.eql(parseInt(req.salary));\r",
							"});\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months\", function () {\r",
							"   pm.expect(jsonData.qa_salary_after_6_months).to.eql((req.salary)*2);\r",
							"});\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months\", function () {\r",
							"   pm.expect(jsonData.qa_salary_after_12_months).to.eql((req.salary)*2.7);\r",
							"});\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year\", function () {\r",
							"   pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql((req.salary)*3.3);\r",
							"});\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years\", function () {\r",
							"   pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql((req.salary)*3.8);\r",
							"});\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Person salary \", function () {\r",
							"   pm.expect(jsonData.person.u_name[1]).to.eql(parseInt(req.salary));\r",
							"});\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Person age \", function () {\r",
							"   pm.expect(jsonData.person.u_age).to.eql(parseInt(req.age));\r",
							"});\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Person u_salary_5_years \", function () {\r",
							"   pm.expect(jsonData.person.u_salary_5_years).to.eql((req.salary)*4.2);\r",
							"});\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (key in jsonData.person) {\r",
							"  if (jsonData.person.hasOwnProperty(key)) {\r",
							"    console.log(key +\" - \"+ jsonData.person[key]);\r",
							"   } \r",
							"} \r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}:{{port}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}